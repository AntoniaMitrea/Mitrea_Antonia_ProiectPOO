#include <iostream>
#include <cstring>

using namespace std;

class Film {
private:
    string nume;
    char* gen;
    const int anAparitie;
    int durata;
    float rating;
    float pret;
    static float reducereElevi;
    
public:
    string getNume() {
        return this->nume; }
    
    char* getGen() {
        return this->gen; }
    
    const int getAnAparitie() {
        return this->anAparitie; }
    
    int getDurata() {
        return this->durata; }
    
    float getRating() {
        return this->rating; }
    
    float getPret() {
        return this->pret; }
    
    static float getReducereElevi() {
        return reducereElevi; }
    
    void setNume(string nume) {
        if (nume.length() > 0) {
            this->nume = nume;
        }
    }
    
    void setGen(const char* gen) {
        if (strlen(gen) > 0) {
            if (this->gen != NULL) {
                delete[]this->gen;
            }
            this->gen = new char[strlen(gen) + 1];
            strcpy(this->gen, gen);
        }
    }
    
    void setDurata(int durata) {
        if (durata > 0) {
            this->durata = durata;
        }
    }
    
    void setRating(float rating) {
        if (rating > 0 && rating <=10) {
            this->rating = rating;
        }
    }
    
    void setPret(int pret) {
        if (pret > 0) {
            this->pret = pret;
        }
    }
    
    static void setReducereElevi(float reducere) {
        reducereElevi = reducere;
    }

    void afisare() {
        cout << "Nume = " << this->nume << endl;
        cout << "Gen = " << this->gen << endl;
        cout << "Anul aparitiei = " << this->anAparitie << endl;
        cout << "Durata = " << this->durata << " minute" << endl;
        cout << "Rating = " << this->rating << " / 10 " << endl;
        cout << "Pret = " << this->pret << " lei" << endl;
        cout << "Reducere pentru elevi = " << this->reducereElevi << "%" << endl;
        cout << endl;
    }
    
    Film():anAparitie(1997) {
        this->nume = "Titanic";
        this->gen = new char[strlen("Dragoste")+1];
        strcpy(this->gen, "Dragoste");
        this->durata = 196;
        this->rating = 7.9;
        this->pret = 20;   
    }
    
    Film(string nume, char* gen, const int an, int durata, float rating, float pret) : anAparitie(an){
        this->nume = nume;
        this->gen = new char[strlen(gen)+1];
        strcpy(this->gen, gen);
        this->durata = durata;
        this->rating = rating;
        this->pret = pret;
    }
    
    Film (string nume, const int an, int durata, float rating) : anAparitie(an){
        this->nume = nume;
        this->gen = new char[strlen("Horror")+1];
        strcpy(this->gen, "Horror");
        this->durata = durata;
        this->rating = rating;
        this->pret = 15;
    }
    
    Film(const Film &film) : anAparitie(film.anAparitie) {
        this->nume = film.nume;
        this->gen = new char[strlen(film.gen) + 1];
        strcpy(this->gen, film.gen);
        this->durata = film.durata;
        this->rating = film.rating;
        this->pret = film.pret;
        }
    
    ~Film() {
        if (this->gen != NULL) {
            delete[]this->gen;
            this->gen = NULL;
        }
    }
    
    static void eliminaReducere() {
        reducereElevi = 0;
    }
    friend void calculPretBiletElev(Film film);
    
};
float Film::reducereElevi = 50;

void calculPretBiletElev(Film film) {
    float p;
    p = film.pret * (film.reducereElevi / 100);
    cout << "Pentrul filmul '" << film.nume << "' pretul unui bilet pentru elevi este de " << p << " lei" << endl << endl;
}

class Sala{
private:
    int nrSala;
    int nrLocuri;
    const float suprafata;
    string supraveghetor;
    static float maximOreFunctionare;
    int* esteDisponibila;
    
public:
    int getNrSala() {
        return this->nrSala; }
    
    int getNrLocuri() {
        return this->nrLocuri; }
    
    const float getSuprafata() {
        return this->suprafata; }
    
    string getSupraveghetor() {
        return this->supraveghetor; }
    
    static float getMaximOreFunctionare() {
        return maximOreFunctionare; }
    
    int* getDisponibilitate() {
        return this->esteDisponibila; }
    
    void setNrSala(int nr) {
        if (nr > 0) {
            this->nrSala = nr;
        }
    }

    void setNrLocuri(int nr) {
        if (nr > 0) {
            this->nrLocuri = nr;
        }
    }
    
    void setSupraveghetor(string sup) {
        if (sup.length() > 0) {
            this->supraveghetor = sup;
        }
    }
    
    static void setMaximOreFunctionare(float maxim) {
        maximOreFunctionare = maxim;
    }
    
    void setDisponibilitate(const int* disp) {
        if (*(disp) == 0 || *(disp) == 1) {
            if (this->esteDisponibila != NULL) {
                delete[]this->esteDisponibila;
            }
            this->esteDisponibila = new int;
            *(this->esteDisponibila) = *(disp);
        }
    }
    
    void afisare() {
        cout << "Numarul salii = " << this->nrSala << endl;
        cout << "Numarul de locuri = " << this->nrLocuri << endl;
        cout << "Suprafata = " << this->suprafata << " mp" << endl;
        cout << "Supraveghetor = " << this->supraveghetor << endl;
        cout << "Maxim ore de functionare = " << this->maximOreFunctionare << " ore" << endl;
        
        if (*(this->esteDisponibila) == 1)
            cout << "Este disponibila" << endl;
        else
            cout << "Nu este disponibila" << endl;
        cout << endl;    
    }
    
    Sala():suprafata(100) {
        this->nrSala = 1;
        this->nrLocuri = 75;
        this->supraveghetor = "Ivan Mircea";
        this->esteDisponibila = new int;
        *(this->esteDisponibila) = 1;
    }
    
    Sala(int nrSala, int nrLocuri, const float supraf, string supraveghetor, int* esteDisponibila) : suprafata(supraf) {
        this->nrSala = nrSala;
        this->nrLocuri = nrLocuri;
        this->supraveghetor = supraveghetor;
        this->esteDisponibila = new int;
        *(this->esteDisponibila) = *(esteDisponibila);
    }
    
    Sala(int nrSala, const float supraf, string supraveghetor) : suprafata(supraf) {
        this->nrSala = nrSala;
        this->nrLocuri = 100;
        this->supraveghetor = supraveghetor;
        this->esteDisponibila = new int;
        *(this->esteDisponibila) = 1;
    }
    
    Sala(const Sala &sala) : suprafata(sala.suprafata) {
        this->nrSala = sala.nrSala;
        this->nrLocuri = sala.nrLocuri;
        this->supraveghetor = sala.supraveghetor;
        this->esteDisponibila = new int;
        *(this->esteDisponibila) = *(sala.esteDisponibila);
    }
    
    ~Sala() {
        if (this->esteDisponibila != NULL) {
            delete[]this->esteDisponibila;
            this->esteDisponibila = NULL;
        }
    }
    
    static void injumatatesteProgram() {
        maximOreFunctionare = maximOreFunctionare / 2;
    }
};
float Sala::maximOreFunctionare = 15;

class Angajat{
private:
    string nume;
    char* pozitie;
    int varsta;
    float salariu;
    static float impozitSalariu;
    const int anAngajare;

public:
    string getNume() {
        return this->nume; }
    
    char* getPozitie() {
        return this->pozitie; }
    
    int getVarsta() {
        return this->varsta; }
    
    float getSalariu() {
        return this->salariu; }
    
    const int getAnAngajare() {
        return this->anAngajare; }
    
    static float getImpozitSalariu() {
        return impozitSalariu; }
    
    void setNume(string nume) {
        if (nume.length() > 0) {
            this->nume = nume;
        }
    }
    
    void setPozitie(const char* pozitie) {
        if (strlen(pozitie) > 0) {
            if (this->pozitie != NULL) {
                delete[]this->pozitie;
            }
            this->pozitie = new char[strlen(pozitie) + 1];
            strcpy(this->pozitie, pozitie);
        }
    }
    
    void setVarsta(int varsta) {
        if (varsta > 18) {
            this->varsta = varsta;
        }
    }
    
    void setSalariu(float salariu) {
        if (salariu > 3000) {
            this->salariu = salariu;
        }
    }
    
    static void setImpozitSalariu(float impozit) {
        impozitSalariu = impozit;
    }

    void afisare() {
        cout << "Nume = " << this->nume << endl;
        cout << "Pozitie = " << this->pozitie << endl;
        cout << "Varsta = " << this->varsta << " ani" << endl;
        cout << "Salariu = " << this->salariu << " lei" << endl;
        cout << "Impozit pe salariu = " << this->impozitSalariu << "%" << endl;
        cout << "Anul angajarii = " << this->anAngajare << endl;
        cout << endl;
    }
    
    Angajat():anAngajare(2015) {
        this->nume = "Popescu Ion";
        this->pozitie = new char[strlen("Director") + 1];
        strcpy(this->pozitie,"Director");
        this->varsta = 50;
        this->salariu = 7000;
    }
    
    Angajat(string nume, char* pozitie, int varsta, float salariu, const int an) : anAngajare(an) {
        this->nume = nume;
        this->pozitie = new char[strlen(pozitie) + 1];
        strcpy(this->pozitie, pozitie);
        this->varsta = varsta;
        this->salariu = salariu;
    }
    
    Angajat(string nume, int varsta, const int an) : anAngajare(an) {
        this->nume = nume;
        this->pozitie = new char[strlen("Paznic") + 1];
        strcpy(this->pozitie, "Paznic");
        this->varsta = varsta;
        this->salariu = 2000;
    }
    
    Angajat(const Angajat &angajat) : anAngajare(angajat.anAngajare) {
        this->nume = angajat.nume;
        this->pozitie = new char[strlen(angajat.pozitie) + 1];
        strcpy(this->pozitie, angajat.pozitie);
        this->varsta = angajat.varsta;
        this->salariu = angajat.salariu;
    }
    
    ~Angajat() {
        if (this->pozitie != NULL) {
            delete[]this->pozitie;
            this->pozitie = NULL;
        }
    }
    
    static void dubleazaImpozitSalariu() {
        impozitSalariu = impozitSalariu * 2;
    }
    
    friend void comparareSalariu (Angajat ang1, Angajat ang2);
};
float Angajat::impozitSalariu = 42;

void comparareSalariu (Angajat ang1, Angajat ang2) {
    if (ang1.salariu > ang2.salariu) {
        cout << "Angajatul " << ang1.nume << " are salariul mai mare decat angajatul " << ang2.nume << endl;
    }
    else if (ang1.salariu < ang2.salariu) {
        cout << "Angajatul " << ang1.nume << " are salariul mai mic decat angajatul " << ang2.nume << endl;
    }
    else {
        cout << "Angajatii " << ang1.nume << " si " << ang2.nume << " au salariile egale" << endl;
    }
    
    cout << ang1.nume << ": " << ang1.salariu << " lei" << endl;
    cout << ang2.nume << ": " << ang2.salariu << " lei" << endl;
}

int main()
{
    
    Film film1;
    cout << "Filmul 1: " << endl;
    film1.afisare();
    
    calculPretBiletElev(film1);
    
    film1.setNume("Titanic TEST");
    film1.setGen("Dragoste TEST");
    film1.setDurata(100);
    film1.setRating(9.5);
    film1.setPret(25);
    film1.setReducereElevi(10);
    
    cout << "Filmul 1 (cu valorile introduse prin setter): " << endl;
    cout << "Nume = " << film1.getNume() << endl;
    cout << "Gen = " << film1.getGen() << endl;
    cout << "Anul aparitie = " << film1.getAnAparitie() << endl;
    cout << "Durata = " << film1.getDurata() << " minute" << endl;
    cout << "Rating = " << film1.getRating() << " / 10" << endl;
    cout << "Pret = " << film1.getPret() << " lei" << endl;
    cout << "Reducere pentru elevi = " << film1.getReducereElevi() << "%" << endl;
    cout << endl;
    
    /*
    char* gen = new char[strlen("Science Fiction") + 1];
    strcpy(gen,"Science Fiction");
    Film film2("Matrix", gen, 1999, 136, 8.7, 25);
    film2.afisare();
    
    Film film3("The Conjuring", 2013, 112, 7.5);
    film3.afisare();
    */
    
    
    Sala sala1;
    cout << "Sala 1: " << endl;
    sala1.afisare();
     
    sala1.setNrSala(22);
    sala1.setNrLocuri(1000);
    sala1.setSupraveghetor("Ivan Mircea TEST");
    sala1.setMaximOreFunctionare(24);
    //sala1.setDisponibilitate(0);
    
    cout << "Sala 1 (cu valorile introduse prin setter): " << endl;
    cout << "Numarul salii = " << sala1.getNrSala() << endl;
    cout << "Numarul de locuri = " << sala1.getNrLocuri() << endl;
    cout << "Suprafata = " << sala1.getSuprafata() << " mp " << endl;
    cout << "Supraveghetor = " << sala1.getSupraveghetor() << endl;
    cout << "Maxim ore de functionare = " << sala1.getMaximOreFunctionare() << " ore" << endl;
    if (*(sala1.getDisponibilitate()) == 1) {
        cout << "Este disponibila" << endl;
    }
    else {
        cout << "Nu este disponibila" << endl;
    }
    cout << endl;
    
    /*
    int* esteDisponibila = new int;
    *(esteDisponibila) = 0;
    Sala sala2(2, 90, 130, "Mihai Gabriel", esteDisponibila);
    sala2.afisare();
    
    Sala sala3(3, 200, "Stancu Corneliu");
    sala3.afisare();
    */
    
    Angajat angajat1;
    cout << "Angajatul 1: ";
    angajat1.afisare();
    
    angajat1.setNume("Popescu Ion TEST");
    angajat1.setPozitie("Director TEST");
    angajat1.setVarsta(55);
    angajat1.setSalariu(6000);
    angajat1.setImpozitSalariu(50);
    
    cout << "Angajatul 1 (cu valorile introduse prin setter): " << endl;
    cout << "Nume = " << angajat1.getNume() << endl;
    cout << "Pozitie = " << angajat1.getPozitie() << endl;
    cout << "Varsta = " << angajat1.getVarsta() << " ani" << endl;
    cout << "Salariu = " << angajat1.getSalariu() << " lei" << endl;
    cout << "Impozit pe salariu = " << angajat1.getImpozitSalariu() << "%" << endl;
    cout << "Anul angajarii = " << angajat1.getAnAngajare() << endl;
    cout << endl;
    
    char* pozitie = new char[strlen("Manager") + 1];
    strcpy(pozitie,"Manager");
    Angajat angajat2("Stoica Lavinia", pozitie, 36, 4500, 2018);
    cout << "Angajatul 2: " << endl;
    angajat2.afisare();
    
    cout << "Comparare de salarii: " << endl;
    comparareSalariu(angajat2, angajat1);
    cout << endl;
    
    /*
    Angajat angajat3("Stancu Corneliu", 45, 2023);
    angajat3.afisare();
    */
    
    film1.eliminaReducere();
    cout << "Reducerea pentru elevi a fost eliminata: " << endl;
    cout << "Reducere pentru elevi: " << film1.getReducereElevi() << "%" << endl;
    cout << endl;
    
    sala1.injumatatesteProgram();
    cout << "Maximul orelor de functionare a fost injumatatit: " << endl;
    cout << "Maxim ore de functionare: " << sala1.getMaximOreFunctionare() << " ore" << endl;
    cout << endl;
    
    angajat1.dubleazaImpozitSalariu();
    cout << "Impozitul pe salariu a fost dublat: " << endl;
    cout << "Impozitul pe salariu: " << angajat1.getImpozitSalariu() << "%" << endl;
    cout << endl;
}



